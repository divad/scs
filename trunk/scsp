#!/usr/bin/python
# Subversion Configuration System Manager

#### IMPORTS
import scslib
from scslib import inform, meta
from optparse import OptionParser, OptionGroup
import os
import sys
import shutil
import pysvn
import atexit

def main():
	## Require root
	scslib.requireRoot()

	usage = '''Usage: %prog [options] ACTION [...]
	
    list                Lists all packages
    create    NAME      Create a package
    delete    NAME      Deletes a package
    set       NAME PROPERTY VALUE     
                        Set a package property to VALUE'''

	#### COMMAND LINE PARSER
	parser = OptionParser(usage=usage,version='scs version 3')
	parser.add_option('-c','--config-file',dest='config',default="/etc/scs.conf",help='Set the configuration file to use')
	group = OptionGroup(parser,"Options for 'create'")
	group.add_option('-s','--step-free',action='store_true',dest='stepfree',default=False,help='Create a non-transactional package')
	group.add_option('-d','--desc',action='store_true',dest='desc',default=None,help='Set package description')
	parser.add_option_group(group)
	(options, args) = parser.parse_args()

	## Load configuration variables
	conf = scslib.sLoadConfig(options.config);

	## Load subversion library
	svnclient = pysvn.Client()

	## Build package path
	pkgcodir  = os.path.join(conf['scsmroot'],'packages')

	## Deal with no args
	if len(args) <= 0:
		parser.print_help()
		return
		
	## Get metadata
	meta.load(conf['metadataPath'])
	## Call save on exit
	atexit.register(meta.save)
			
	## Shortcut to action
	action = args[0]

	#### PACKAGE CREATE ####################################################
	if action == 'create' and len(args) == 2:
		name = args[1]
		svnpath = os.path.join(conf['svnroot'],name)

		## the name must be unique across packages and channels
		if meta.data['channels'].has_key(name) or meta.data['packages'].has_key(name):
			inform.fatal("That name is already in use")

		## Create the SVN
		scslib.sCreateSVN(svnpath,name)

		## Checkout the new SVN
		checkout = os.path.join(pkgcodir,name)
		svnclient.checkout('file://' + svnpath, checkout)

		try:
			os.mkdir(os.path.join(checkout,'scripts'))
			os.mkdir(os.path.join(checkout,'.scs'))
			os.mkdir(os.path.join(checkout,'data'))
			open(os.path.join(checkout,'scripts','preinit'),'w')
			open(os.path.join(checkout,'scripts','postinit'),'w')
			open(os.path.join(checkout,'scripts','uninit'),'w')
			open(os.path.join(checkout,'scripts','preup'),'w')
			open(os.path.join(checkout,'scripts','postup'),'w')
			open(os.path.join(checkout,'scripts','preinst'),'w')
			open(os.path.join(checkout,'scripts','postinst'),'w')
			open(os.path.join(checkout,'scripts','preinc'),'w')
			#open(os.path.join(checkout,'.scs','stepfree'),'w')
		except (OSError, IOError) as error:
			print 'Failed to create base components of package. Error was: ' + error.strerror + ' on ' + error.filename
		else:
			svnclient.add(os.path.join(checkout,'scripts'),recurse=True)
			#svnclient.add(os.path.join(checkout,'.scs'),recurse=True)
			svnclient.add(os.path.join(checkout,'data'),recurse=True)
			revision = svnclient.checkin(checkout,"Package creation",recurse=True)

			## Record in meta.data for lating saving into metafile
			meta.data['packages'][name] = {'name': name}
			
			## Other options
			if options.stepfree:
				meta.data['packages'][name]['type'] = 'idempotent'
			else:
				meta.data['packages'][name]['type'] = 'transactional'
				
			if not options.desc == None:
				meta.data['packages'][name]['desc'] = options.desc

		## Cleanup in all cases
		shutil.rmtree(checkout)
		
	#### PACKAGE SET #######################################################
	elif action == 'set' and len(args) == 4:
		pkgName  = args[1]
		prop     = args[2]
		value    = args[3]
		
		if not meta.data['packages'].has_key(pkgName):
			inform.fatal("That package does not exist")
		
		## DESC
		if prop == 'desc':
				meta.data['packages'][pkgName][prop] = value
		else:
			inform.fatal("No such property")

	#### PACKAGE DELETE ####################################################
	elif action == 'delete' and len(args) == 2:
		name = args[1]

		## Make sure it exists
		if not meta.data['packages'].has_key(name):
			inform.fatal("Sorry, that package does not exist")
		else:
			scslib.sDeleteSVN(os.path.join(conf['svnroot'],name))
			del(meta.data['packages'][name])

	#### PACKAGE LIST ######################################################
	elif action == 'list':
		output = ''
		for pkgname in meta.data['packages']:
			pkgdict = meta.data['packages'][pkgname]
			
			if pkgdict.has_key('desc'):
				output += '{0:14}  {1:64}'.format(pkgdict['name'],pkgdict['desc'])
			else:
				output += '{0:14}  {1:64}'.format(pkgdict['name'],'N/A')
			
		if len(output) > 0:
			print '{0:14}  {1:64}'.format('PACKAGE NAME','DESCRIPTION')
			print '{0:14}  {1:64}'.format('------------','-----------')
			sys.stdout.write(output)		
			
	else:
		parser.print_help()

	## Save metadata
	meta.save()

if __name__ == "__main__":
	if sys.version < '2.6':
		inform.fatal('Wrong Python Version !!!')
	else:
	    main()

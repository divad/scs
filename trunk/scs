#!/usr/bin/python -u

import os
import stat
import sys
import pysvn
import shutil
from optparse import OptionParser, OptionGroup
import atexit
import scslib
import scsclient
from scsclient import client
from scslib import inform, meta, svnclient

## QUESTIONS:
# should a backup be taken of existing files when init'ing or when local changes are found?
# check is taken from /PREVIOUS/ revision...is that a good thing?
# Add ability for revisions to be skipped or marked as test revisions???
### package wise, revprops? 
### channel wise, revprops?

## FIXES:
# scsc tag as /dev/, or "mark" as normal. 
# check when deleting things like pkgs on client and server if the package is needed by a channel (client) or is in a channel (server).

## FUTURE FEATURES:
# non-transactional packages
# Add "pkg-info" command to print package info on server (this command is run on client)
# Add "chan-info" command to print channel info on server (this command is run on client)
# non-transactional packages
# Default action when local changes found should be via a pkgset thing

################################################################################
################################################################################


def main():
	## Require root
	scslib.requireRoot()
	
	#### Define the usage text
	usage = '''Usage: %prog [options] ACTION [...]

    Update functions:

        check                      List available updates from channels
        update        CHANNEL      Apply updates from a channel
        update-all                 Apply all updates from all channels

    Basic package functions:

        installed                  List installed packages
        packages                   List all available packages
        status        PACKAGE      Show the package status         

    Package maintenance functions: 

        verify        PACKAGE      Verify system conforms to package spec
        verify-all                 Verify system conforms to all package specs
        files         PACKAGE      List files which are part of PACKAGE
        files-all                  List files from all packages
        force         PACKAGE      Force-apply package data to system, ignoring
                                   any local changes that might occur.
        force-all                  As above, but for all installed packages
        owner         FILEPATH     Determine if FILEPATH is owned by a package
        suspend       PACKAGE      Lock a package so it cannot be updated
        resume        PACKAGE      Unlock a package

    Channel-related actions:
        subscribed                 List channels this system is subscribed to
        channels                   List all available channels 
        subscribe     CHANNEL      Subscribe to a channel
        unsubscribe   CHANNEL      Unsubscribe from a channel
        
    Advanced package functions:
    
        init          PACKAGE      Install/upgrade package (Not recommended)
        uninit        PACKAGE      Remove package (Not recommended)'''

	## Set a 'good' working directory
	os.chdir('/tmp')

	#### Parse command line options
	parser = OptionParser(usage=usage,version="scs version " + scslib.versionStr())
	parser.add_option('-c','--config-file',dest='config',default="/etc/scs.conf",help='Set the configuration file to use')
	parser.add_option('-f','--force',dest='ignore',default=False,action="store_true",help='Ignore local changes and proceed anyway')
	parser.add_option('-d','--debug',dest='debug',default=False,action="store_true",help='Print debug messages during execution')
	parser.add_option('-q','--quiet',dest='quiet',default=False,action="store_true",help='Print no output except in the case of error')
	group = OptionGroup(parser,"Options for 'init'")
	group.add_option('-r','--revision',type="int",default=-1,dest='revision',help='Specify a specific revision of the package to tag')
	parser.add_option_group(group)
	(options, args) = parser.parse_args()
	
	#### Set debug/quiet
	if options.debug:
		inform.setDebug()
	if options.quiet:
		inform.setQuiet()

	## Load config
	client.loadConfig(options.config)	

	## Load metadata
	meta.load(os.path.join(client.dataroot,'client.meta'))
	
	## Register a close handler so it is saved at exit
	atexit.register(meta.save)
	
	#### SWTICH ACTIONS
	if len(args) < 1:
		parser.print_help()
	else:
		action = args[0]

################################################################################

		if action == 'installed':
			looped = False
			for pkg in meta.data['packages']:

				if not looped:
					client.printPackageHeader()
					looped = True

				client.printPackageInfo(pkg)

################################################################################

		elif action == 'packages':
			output = ''
			for pkgName in client.remoteMeta['packages']:
				data = client.remoteMeta['packages'][pkgName]
				if type(data).__name__=='dict':
				
					## Get the latest channel revision
					remotePath  = client.svnurl + '/' + pkgName + '/'

					## Get the latest revision of the package
					infoList = svnclient.info2(remotePath,recurse=False)
					for infoTuple in infoList:
						infoDict = infoTuple[1]
						latestRevision = infoDict['rev']
						
					if data.has_key('name') and data.has_key('desc'):
						print str(data['name']) + '-r' + str(latestRevision.number) + ' - ' + str(data['desc'])
					elif data.has_key('name'):
						print str(data['name']) + '-r' + str(latestRevision.number) + ' - No description available'
					else:
						inform.fatal('Unable to understand data: ' + str(e))
				else:
					inform.fatal('Unable to understand data: ' + str(e))

			if len(output) > 0:
				sys.stdout.write(output)

################################################################################

		elif action == 'status' and len(args) == 2:
			## Store package name in a friendly variable
			pkg = args[1]

			if client.packageInstalled(pkg):
				data = meta.data['packages'][pkg]

				print '           Name: ' + data['name']
				print ' Local Revision: ' + str(data['revision'])

				if data.has_key('desc'):		
					print '    Description: ' + data['desc']

				if client.isPackageSuspended(pkg):
					print '         Status: SUSPENDED'
					if data.has_key('suspend_reason'):
						print '         Reason: ' + data['suspend_reason']
				else:
					print '         Status: OK'
			else:
				inform.fatal('Package not installed',log=False)
				
################################################################################				

		elif action == 'suspend' and len(args) == 2:
			## Store package name in a friendly variable
			pkg = args[1]

			if client.packageInstalled(pkg):
				if client.isPackageSuspended(pkg):
					inform.fatal('Package is already suspended',log=False)
				else:
					client.suspendPackage(pkg,'Suspended by system administrator')
			else:
				inform.fatal('Package not installed',log=False)
				
################################################################################				

		elif action == 'resume' and len(args) == 2:
			pkg = args[1]

			if client.packageInstalled(pkg):
				if client.isPackageSuspended(pkg):
					client.resumePackage(pkg)
				else:
					inform.fatal('Package is not suspended',log=False)
			else:
				inform.fatal('Package not installed',log=False)
				
################################################################################				

		elif action == 'verify' and len(args) == 2:
			pkg = args[1]

			if client.packageInstalled(pkg):
				client.checkForLocalChanges(pkg)
			else:
				inform.fatal('Package not installed',log=False)
				
################################################################################

		elif action == 'verify-all':
			for pkg in meta.data['packages']:
				inform.debug('Checking for local changes to pkg "' + pkg + '"',log=True)
				client.checkForLocalChanges(pkg)
				
################################################################################				

		elif action == 'force' and len(args) == 2:
			pkg = args[1]

			if client.packageInstalled(pkg):
				dataPath = os.path.join(client.dataroot,'packages',pkg,'data')
				client.installPackageData(dataPath)
			else:
				inform.fatal('Package not installed',log=False)
				
################################################################################

		elif action == 'force-all':
			for pkg in meta.data['packages']:
				inform.debug('Forcing package data processing on "' + pkg + '"',log=True)
				dataPath = os.path.join(client.dataroot,'packages',pkg,'data')			
				client.installPackageData(dataPath)	

################################################################################

		elif action == 'files' and len(args) == 2:
			pkg = args[1]

			if client.packageInstalled(pkg):
				dataPath = os.path.join(client.dataroot,'packages',pkg,'data')
				client.listFiles(pkg)
			else:
				inform.fatal('No such package')

################################################################################

		elif action == 'files-all':
			for pkg in meta.data['packages']:
				inform.info(pkg + ':')
				client.listFiles(pkg)

################################################################################

		elif action == 'owner' and len(args) == 2:
			fileName = args[1]
			for pkg in meta.data['packages']:
				propList = svnclient.proplist(os.path.join(client.dataroot,'packages',pkg,'data'),recurse=True)

				for propSet in propList:
					source     = propSet[0]
					properties = propSet[1]

					if 'dest' in properties:
						dest = properties['dest']

						if dest == fileName:
							print pkg

#################################################################################

		elif action == 'init' and len(args) == 2:
			## Store package name in a friendly variable
			pkg = args[1]

			## See if the package requested actually exists
			found = False
			for pkgName in client.remoteMeta['packages']:
				if pkgName == pkg:
					found = True

			## Catch errors
			if not found:
				inform.fatal('No such package on server')

			client.initPkg(pkg)

################################################################################

		elif action == 'uninit' and len(args) == 2:
			pkg = args[1]
			if client.packageInstalled(pkg):
				client.uninitPkg(pkg)
			else:
				inform.fatal('That package is not installed.')

################################################################################

		elif action == 'channels':
			scslib.listChannels(client.remoteMeta)
			
################################################################################

		elif action == 'subscribed':
			scslib.listChannels(meta.data)

################################################################################

		elif action == 'subscribe' and len(args) == 2:
			channel    = args[1]
			remotePath = client.svnurl + '/' + channel + '/'
			localPath  = os.path.join(client.dataroot,'channels',channel)
			localPkgs  = os.path.join(localPath,'packages')

			## See if the channel requested actually exists
			found = False
			for channelName in client.remoteMeta['channels']:
				if channelName == channel:
					found = True

			## Catch errors
			if not found:
				inform.fatal('No such channel exists on the server')

			if client.remoteMeta['channels'][channel].has_key('desc'):
				channelDescription = client.remoteMeta['channels'][channel]['desc']
			else:
				channelDescription = ''

			if client.channelSubscribed(channel):
				inform.info("Already subscribed to channel")
			else:

				## If this a child channel
				if client.remoteMeta['channels'][channel].has_key('parent'):
					## Make sure we've installed the parent...
					if not client.channelSubscribed(client.remoteMeta['channels'][channel]['parent']):
						inform.fatal('To subscribe to a child channel you must first subscribe to its parent')
					else:
						## Make sure the parent is up to date first... (the key component of a "child" channel)
						if not client.isChannelUpToDate(client.remoteMeta['channels'][channel]['parent']):
							inform.fatal('The parent channel is not up to date. You must update it first')

				if not os.path.isdir(localPath):
					## set up directory layout
					## but only if it isn't there
					## this can happen if subscribe fails
					try:
						os.mkdir(localPath)
						os.mkdir(localPkgs)
					except (OSError, IOError) as error:
						inform.fatal('Failed to subscribe to channel. Error was: ' + error.strerror + ' on ' + error.filename)

					## Download package information
					svnclient.checkout(remotePath + 'packages',localPkgs)
				else:
					## Update package information
					svnclient.update(localPkgs)

				## Now do a property walk to know what packages to install
				propList = svnclient.proplist(localPkgs,recurse=True)

				pkgList = []
				for propSet in propList:
					fname      = propSet[0]
					properties = propSet[1]

					if 'revision' in properties and 'name' in properties:
						if 'order' in properties:
							pkgList.append((int(properties['order']),properties['name'],int(properties['revision'])))
						else:
							pkgList.append((999999999,properties['name'],int(properties['revision'])))

				## Sort according to install order
				## use -pkg[0] for reverse
				pkgList = sorted(pkgList, key=lambda pkg: pkg[0])
				
				## Install packages
				for pkgT in pkgList:
				
					## Install it and get a result
					(retcode,faultMsg) = client.initPkg(pkgT[1],rev=pkgT[2])

					## Result of pkgInit
					if retcode > 0:
						inform.fatal("Could not init/upgrade " + properties['name'] + ". Could not subscribe to channel.")

				## What revision did we just subscribe to?
				infoList = svnclient.info2(localPkgs,recurse=False)
				for infoTuple in infoList:
					infoDict = infoTuple[1]
					localRevision = infoDict['rev'].number

				## Update metadata with the new channel
				meta.data['channels'][channel] = { 'name': channel, 'revision': localRevision, 'desc' : channelDescription}
				
				## Update metadata
				if client.remoteMeta['channels'][channel].has_key('parent'):
					meta.data['channels'][channel]['parent'] = client.remoteMeta['channels'][channel]['parent']

				## Output
				inform.info('Subscribed to channel ' + channel + ' - at revision ' + str(localRevision),log=True)

################################################################################

		elif action == 'unsubscribe' and len(args) == 2:
			channel    = args[1]
			localPath  = os.path.join(client.dataroot,'channels',channel)
			localPkgs  = os.path.join(localPath,'packages')

			if not client.channelSubscribed(channel):
				inform.fatal("Not subscribed to that channel",log=False)
			else:
				## Does this channel have children? If so...GO AWAY...
			
				## Now do a property walk to know what packages to install
				propList = svnclient.proplist(localPkgs,recurse=True)

				pkgList = []

				for propSet in propList:
					fname      = propSet[0]
					properties = propSet[1]

					if 'revision' in properties and 'name' in properties:
						if 'order' in properties:
							pkgList.append((int(properties['order']),properties['name'],int(properties['revision'])))
						else:
							pkgList.append((999999999,properties['name'],int(properties['revision'])))

				## Sort according to remove order
				pkgList = sorted(pkgList, key=lambda pkg: -pkg[0])
				
				for pkgT in pkgList:
					result = client.uninitPkg(pkgT[1])

					if result == 1:
						## Failed to remove, could not unsubscribe!
						inform.fatal("Could not unsubscribe from channel. Please correct the error and try to unsubscribe again")
						
				## Delete data
				shutil.rmtree(localPath)

				## Update metadata
				del(meta.data['channels'][channel])

				## Output
				inform.info('Unsubscribed from channel ' + channel,log=True)

################################################################################

		elif action == 'check':
			output = ''

			for channel in meta.data['channels']:
				remotePath   = client.svnurl + '/' + channel + '/'

				## Get latest remote revision
				infoList = svnclient.info2(remotePath,recurse=False)
				for infoTuple in infoList:
					infoDict = infoTuple[1]
					latestRevision = infoDict['rev']

				if latestRevision.number > int(meta.data['channels'][channel]['revision']):
					output += "{0:24}    {1:24}    {2:24}\n".format(channel,str(latestRevision.number), str(meta.data['channels'][channel]['revision']))

			if len(output) > 0:
				print "{0:24}    {1:24}    {2:24}".format('CHANNEL NAME','LATEST REVISION','LOCAL REVISION')
				print "{0:24}    {1:24}    {2:24}".format('------------','---------------','--------------')
				sys.stdout.write(output)

################################################################################

		elif action == 'update' and len(args) == 2:
			channel = args[1]
			client.updateChannel(channel)

		elif action == 'update-all':
			for channel in meta.data['channels']:
				## Only update top-level parent channels, updateChannel() takes care of child channels
				if not meta.data['channels'][channel].has_key('parent'):
					client.updateChannel(channel)

################################################################################

		else:
			parser.print_help()

################################################################################

if __name__ == "__main__":
	if sys.version < '2.6':
		sys.stderr.write('Python 2.6 or greater is required for this program. Exiting.')
	else:
	    main()

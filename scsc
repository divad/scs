#!/usr/bin/python
# Subversion Configuration System Manager

#### IMPORTS
import scslib
from scslib import inform, meta
from optparse import OptionParser, OptionGroup
import os
import sys
import shutil
import pysvn
import atexit

## TODO
# info

def main():
	#### HELP TEXT FOR ACTIONS
	usage = '''Usage: %prog [options] ACTION [...]

    list                  Lists all channels
    create    CHANNEL     Create a channel
    delete    CHANNEL     Deletes a channel
T   info      CHANNEL     Show channel contents
    set       CHANNEL PROPERTY VALUE     
                          Set a channel property to VALUE
                        
    tag       CHANNEL PACKAGE
                          Tags the specified package to the channel                    
    untag     CHANNEL PACKAGE
                          Removes the specified package from the channel  
    priority  CHANNEL PACKAGE PRIORITY
                          Sets the install order PRIORITY on PACKAGE in CHANNEL'''

	#### COMMAND LINE PARSER
	parser = OptionParser(usage=usage,version='%prog version 3')
	parser.add_option('-c','--config-file',dest='config',default="/etc/scs.conf",help='Set the configuration file to use')

	group = OptionGroup(parser,"Options for 'create'")
	group.add_option('-p','--parent',default=None,dest='parent',help='Set the parent channel for the channel (Creates a child channel)')
	group.add_option('-d','--desc',default=None,dest='desc',help='Set the description for the channel')
	parser.add_option_group(group)
	
	group = OptionGroup(parser,"Options for 'tag'")
	group.add_option('-r','--revision',type="int",default=-1,dest='revision',help='Specify a specific revision of the package to tag')
	group.add_option('-o','--install-order',type="int",default=-1,dest='instorder',help='Set a installation priority to let scs known what order to install packages')
	parser.add_option_group(group)
	
	(options, args) = parser.parse_args()

	## Load configuration variables
	conf = scslib.sLoadConfig(options.config);

	## Deal with no args
	if len(args) <= 0:
		parser.print_help()
		return

	## Get metadata
	meta.load(conf['metadataPath'])
	## Call save on exit
	atexit.register(meta.save)

	## Load subversion library
	svnclient = pysvn.Client()

	## Build other paths
	chancodir = os.path.join(conf['scsmroot'],'channels')
	pkgcodir  = os.path.join(conf['scsmroot'],'packages')	
			
	## Shortcut to action
	action = args[0]

	#### CHANNEL CREATE ####################################################
	if action == 'create' and len(args) == 2:
		name = args[1]

		## the name must be unique across packages and channels
		if metadict['channels'].has_key(name) or metadict['packages'].has_key(name):
			inform.fatal("That name is already in use")
			
		## Create child channel if chosen
		if not options.parent == None:
			if not metadict['channels'].has_key(options.parent):
				inform.fatal("The name of the parent channel is invalid")
							
				
		## Workout the SVN root should be
		svnpath = os.path.join(conf['svnroot'],name)

		## Create it there
		scslib.sCreateSVN(svnpath,name)

		## Checkout
		codir = os.path.join(chancodir,name)
		svnclient.checkout('file://' + svnpath, codir)

		## Create packages dir
		try:
			os.mkdir(os.path.join(codir,'packages'))
		except (OSError, IOError) as error:
			print 'Failed to create base components of channel. Error was: ' + error.strerror + ' on ' + error.filename
		else:
			## Add the packages dir
			svnclient.add(os.path.join(codir,'packages'))
			
			## Check in the changes
			svnclient.checkin(codir,"Channel creation",recurse=True)
			
			## Change server metadata
			metadict['channels'][name] = {'name': name}
			
			## Save parent channel
			if not options.parent == None:
				metadict['channels'][name]['parent'] = options.parent
				
			## Save description
			if not options.desc == None:
				metadict['channels'][name]['desc'] = options.desc				
			
	#### CHANNEL SET #######################################################
	elif action == 'set' and len(args) == 4:
		channelName  = args[1]
		prop         = args[2]
		value        = args[3]
		
		if not metadict['channels'].has_key(channelName):
			inform.fatal("Sorry, that channel does not exist!")
		
		## DESC
		if prop == 'desc':
				metadict['channels'][channelName][prop] = value
		else:
			inform.fatal("No such property")

	#### CHANNEL DELETE ####################################################
	elif action == 'delete' and len(args) == 2:
		name = args[1]
		
		if not metadict['channels'].has_key(name):
			inform.fatal("That channel does not exist")
		else:
			scslib.sDeleteSVN(os.path.join(conf['svnroot'],name))
			shutil.rmtree(os.path.join(chancodir,name))
			del(metadict['channels'][name])

	#### CHANNEL LIST ######################################################
	elif action == 'list':
		scslib.listChannels(metadict)

	#### CHANNEL TAG #######################################################
	elif action == 'tag' and len(args) == 3:
	
		## Setup variables
		channelName     = args[1]
		packageName     = args[2]
		pkgSvnPath      = os.path.join(conf['svnroot'],packageName)
		pkgCheckout     = os.path.join(pkgcodir,packageName)
		channelCheckout = os.path.join(chancodir,channelName)
		pkgConfigFile   = os.path.join(channelCheckout,'packages',packageName)
		pkgUpgradeFile  = os.path.join(channelCheckout,'upgrade')

		if not metadict['channels'].has_key(channelName):
			inform.fatal("Sorry, that channel does not exist!")
			
		if not metadict['packages'].has_key(packageName):
			inform.fatal("Sorry, that package does not exist!")

		## Make sure channel is up-to-date
		svnclient.update(os.path.join(chancodir,channelName))

		## Get the current package revision
		infoList = svnclient.info2('file://' + pkgSvnPath + '/',recurse=False,revision=pysvn.Revision(pysvn.opt_revision_kind.head))
		currentPackageRevision = infoList[0][1].rev.number

		## Was there a specific revision to use?
		if options.revision >= 0:
			if options.revision >= currentPackageRevision:
				inform.fatal('Invalid package revision')
			else:
				taggedRevision = options.revision
		else:
			taggedRevision = currentPackageRevision

		## make sure the new revision is higher than the current revision, if any
		if os.path.isfile(pkgConfigFile):
			currentRev = svnclient.propget('revision',pkgConfigFile)
			currentRev = currentRev[pkgConfigFile]

			if int(currentRev) == int(taggedRevision):
				inform.fatal('The package is already tagged to that revision',code=0)
			elif int(currentRev) > int(taggedRevision):
				inform.fatal('The package is already tagged to a more recent revision',code=0)

		## Touch the package name in packages/ in the channel
		try:
			### Remove all previous properties on the upgrade file if it exists
			if os.path.isfile(pkgUpgradeFile):
				svnclient.propdel('name',pkgUpgradeFile)
				svnclient.propdel('revision',pkgUpgradeFile)
				svnclient.propdel('action',pkgUpgradeFile)
			else:
				#### Add the upgrade file cos it hasn't been used yet
				open(pkgUpgradeFile,'w')
				svnclient.add(pkgUpgradeFile)

			## Touch channel/packages/packageName
			if not os.path.isfile(pkgConfigFile):
				open(pkgConfigFile,'w')
				svnclient.add(pkgConfigFile)

			## Set name and revision on "upgrade" file
			svnclient.propset('name',packageName,pkgUpgradeFile)
			svnclient.propset('revision',str(taggedRevision),pkgUpgradeFile)
			svnclient.propset('action','install',pkgUpgradeFile)

			## Set revision on the config file (for new installs)
			svnclient.propset('name',packageName,pkgConfigFile)
			svnclient.propset('revision',str(taggedRevision),pkgConfigFile)

			## Set an install order if requested
			if options.instorder >= 0:
				svnclient.propset('order',str(options.instorder),pkgConfigFile)

			## Checkin
			revision = svnclient.checkin(channelCheckout,"Added version " + str(taggedRevision) + ' of ' + packageName + ' into channel ' + channelName,recurse=True)
		
		except (OSError, IOError) as error:
			print 'Failed to tag package into channel. Error was: ' + error.strerror + ' on ' + error.filename

		except pysvn.ClientError as error:
			print 'Subversion operation failed: ' + str(error)

	#### CHANNEL UNTAG #####################################################
	elif action == 'untag' and len(args) == 3:

		## Setup variables
		channelName     = args[1]
		packageName     = args[2]
		channelCheckout = os.path.join(chancodir,channelName)
		pkgConfigFile   = os.path.join(channelCheckout,'packages',packageName)
		pkgUpgradeFile  = os.path.join(channelCheckout,'upgrade')

		if not metadict['channels'].has_key(channelName):
			inform.fatal("Sorry, that channel does not exist!")

		if not metadict['packages'].has_key(packageName):
			inform.fatal("Sorry, that package does not exist!")

		## Make sure channel is up-to-date
		svnclient.update(os.path.join(chancodir,channelName))

		## is this pkg already tagged? Check the packages/ dir
		if not os.path.isfile(pkgConfigFile):
			inform.fatal('The package is not tagged to the channel')

		try:
			### Remove all previous properties on the upgrade file if it exists
			if os.path.isfile(pkgUpgradeFile):
				svnclient.propdel('name',pkgUpgradeFile)
				svnclient.propdel('revision',pkgUpgradeFile)
				svnclient.propdel('action',pkgUpgradeFile)
			else:
				#### Add the upgrade file cos it hasn't been used yet
				open(pkgUpgradeFile,'w')
				svnclient.add(pkgUpgradeFile)

			## Delete channel/packages/packageName
			os.unlink(pkgConfigFile)
			svnclient.remove(pkgConfigFile)

			## Set the upgrade properties to remove the package
			svnclient.propset('name',packageName,pkgUpgradeFile)
			svnclient.propset('action','remove',pkgUpgradeFile)

			## Checkin
			revision = svnclient.checkin(channelCheckout,"Removed " + packageName + ' from channel ' + channelName,recurse=True)
		
		except (OSError, IOError) as error:
			print 'Failed to untag package from channel. Error was: ' + error.strerror + ' on ' + error.filename

		except pysvn.ClientError as error:
			print 'Subversion operation failed: ' + str(error)

	#### PRIORITY #####################################################
	elif action == 'priority' and len(args) == 4:

		## Setup variables
		channelName     = args[1]
		packageName     = args[2]
		installOrder    = args[3]
		channelCheckout = os.path.join(chancodir,channelName)
		pkgConfigFile   = os.path.join(channelCheckout,'packages',packageName)

		if not metadict['channels'].has_key(channelName):
			inform.fatal("Sorry, that channel does not exist!")

		if not metadict['packages'].has_key(packageName):
			inform.fatal("Sorry, that channel does not exist!")

		## Make sure channel is up-to-date
		svnclient.update(os.path.join(chancodir,channelName))

		try:
			## Set the svn property
			svnclient.propset('order',str(installOrder),pkgConfigFile)

			## Checkin
			revision = svnclient.checkin(channelCheckout,"Removed " + packageName + ' from channel ' + channelName,recurse=True)

		except pysvn.ClientError as error:
			print 'Subversion operation failed: ' + str(error)

	else:
		parser.print_help()

	## Save metadata
	meta.save()

if __name__ == "__main__":
	if sys.version < '2.6':
		inform.fatal('Wrong Python Version !!!')
	else:
	    main()
